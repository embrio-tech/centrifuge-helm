{{- if .Values.cronjob.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "node.fullname" . }}-restart
  labels:
    {{- include "node.labels" . | nindent 4 }}
    app.kubernetes.io/component: cronjob
spec:
  schedule: {{ .Values.cronjob.schedule | quote }}
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: {{ .Values.cronjob.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ .Values.cronjob.failedJobsHistoryLimit }}
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            {{- include "node.selectorLabels" . | nindent 12 }}
            app.kubernetes.io/component: cronjob
        spec:
          {{- with .Values.cronjob.imagePullSecrets }}
          imagePullSecrets:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.cronjob.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          containers:
            - name: kubectl
              image: {{ .Values.cronjob.image.repository }}:{{ .Values.cronjob.image.tag }}
              imagePullPolicy: {{ .Values.cronjob.image.pullPolicy }}
              command:
                - /bin/sh
                - -c
                - |
                  set -e
                  echo "Starting indexer deployment restart at $(date)"
                  
                  # Get the current deployment and pod
                  DEPLOYMENT_NAME="{{ include "node.fullname" . }}"
                  NAMESPACE="{{ .Release.Namespace }}"
                  
                  # Check if deployment exists
                  if ! kubectl get deployment "$DEPLOYMENT_NAME" -n "$NAMESPACE" >/dev/null 2>&1; then
                    echo "Deployment $DEPLOYMENT_NAME not found in namespace $NAMESPACE"
                    exit 1
                  fi
                  
                  # Get the current pod name
                  POD_NAME=$(kubectl get pods -n "$NAMESPACE" -l app.kubernetes.io/name=indexer,app.kubernetes.io/instance={{ .Release.Name }} -o jsonpath='{.items[0].metadata.name}')
                  
                  if [ -z "$POD_NAME" ]; then
                    echo "No running pod found for deployment $DEPLOYMENT_NAME"
                    exit 1
                  fi
                  
                  echo "Found pod: $POD_NAME"
                  
                  # Gracefully delete the pod (this will trigger a new pod creation due to ReplicaSet)
                  echo "Gracefully deleting pod $POD_NAME..."
                  kubectl delete pod "$POD_NAME" -n "$NAMESPACE" --grace-period=30
                  
                  # Wait for new pod to be ready
                  echo "Waiting for new pod to be ready..."
                  kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=indexer,app.kubernetes.io/instance={{ .Release.Name }} -n "$NAMESPACE" --timeout={{ .Values.cronjob.rolloutTimeout }}
                  
                  echo "Deployment restart completed successfully at $(date)"
              {{- with .Values.cronjob.resources }}
              resources:
                {{- toYaml . | nindent 16 }}
              {{- end }}
              {{- with .Values.cronjob.env }}
              env:
                {{- toYaml . | nindent 16 }}
              {{- end }}
          restartPolicy: OnFailure
          {{- with .Values.cronjob.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.cronjob.affinity }}
          affinity:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.cronjob.tolerations }}
          tolerations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
{{- end }}
